---
import { Icon } from 'astro-icon/components';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';

import { trimSlash, getAsset } from '~/utils/permalinks';
import { getBayamoNavigation } from '~/utils/bayamo-navigation';
import type { CallToAction } from '~/types';

export interface Props {
  id?: string;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  isSticky = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
} = Astro.props;

// Always use Bayamo navigation - simple navigation without dropdowns
const navigationLinks = getBayamoNavigation();

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    {
      'fixed': isSticky,
      'relative': !isSticky,
      'bg-white/95 backdrop-blur-md': isSticky,
      'bg-white': !isSticky,
    },
    'top-0 left-0 right-0 z-50 transition-all duration-300 ease-in-out border-b border-gray-100',
    'dark:bg-gray-900/95 dark:border-gray-800',
    { 'dark:backdrop-blur-md': isSticky }
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div
    class:list={[
      'mx-auto px-6 lg:px-12 py-6',
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <div class="flex justify-center items-center">
      <!-- Desktop Navigation -->
      <nav
        class="hidden md:flex items-center"
        aria-label="Main navigation"
      >
        {
          navigationLinks.map((link, index) => (
            <>
              <a
                href={link.href}
                class:list={[
                  'text-sm tracking-widest text-gray-700 dark:text-gray-300 hover:text-blue-900 dark:hover:text-blue-400 transition-colors duration-300 px-4 py-2 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',
                  { 'text-blue-900 dark:text-blue-400 font-medium': link.href === currentPath },
                ]}
              >
                {link.text}
              </a>
              {index < navigationLinks.length - 1 && (
                <span class="text-gray-300 dark:text-gray-600 mx-1">|</span>
              )}
            </>
          ))
        }
      </nav>

      <!-- Desktop Actions & Controls -->
      <div class="hidden md:flex items-center space-x-4">
        {showToggleTheme && (
          <ToggleTheme iconClass="w-5 h-5 text-gray-600 dark:text-gray-400 hover:text-blue-900 dark:hover:text-blue-400 transition-colors duration-300" />
        )}
        {
          showRssFeed && (
            <a
              class="text-gray-600 dark:text-gray-400 hover:text-blue-900 dark:hover:text-blue-400 transition-colors duration-300 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
              aria-label="RSS Feed"
              href={getAsset('/rss.xml')}
            >
              <Icon name="tabler:rss" class="w-5 h-5" />
            </a>
          )
        }
       
      </div>

      <!-- Mobile Navigation Button -->
      <div class="md:hidden flex items-center space-x-3">
        {showToggleTheme && (
          <ToggleTheme iconClass="w-5 h-5 text-gray-600 dark:text-gray-400" />
        )}
        <ToggleMenu />
      </div>
    </div>

    <!-- Mobile Navigation Menu - Simplified for Astro & Tailwind -->
    <nav
      id="mobile-menu"
      class="fixed inset-0 z-50 flex flex-col items-center justify-center space-y-6 bg-white dark:bg-gray-900 p-6 transition-opacity duration-300 ease-in-out opacity-0 invisible md:hidden"
      aria-label="Mobile navigation"
      aria-hidden="true"
    >
      <!-- Dedicated Close Button (Top Right Corner) -->
      <button
        id="mobile-menu-close-button"
        class="absolute top-6 right-6 p-2 text-gray-700 dark:text-gray-300 hover:text-blue-900 dark:hover:text-blue-400 transition-colors duration-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        aria-label="Close mobile menu"
      >
        <Icon name="tabler:x" class="w-8 h-8" />
      </button>

      <!-- Navigation Links -->
      {
        navigationLinks.map((link) => (
          <a
            href={link.href}
            class:list={[
              'block w-full py-4 text-center text-xl tracking-widest text-gray-700 dark:text-gray-300 rounded-lg transition-colors duration-200',
              'hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-blue-900 dark:hover:text-blue-400',
              'focus:outline-none focus:ring-2 focus:ring-blue-500',
              { 'text-blue-900 dark:text-blue-400 font-medium': link.href === currentPath },
            ]}
          >
            {link.text}
          </a>
        ))
      }

    </nav>
  </div>
</header>

<script>
  // Simplified script for the full-screen mobile menu
  document.addEventListener('DOMContentLoaded', function() {
    const openBtn = document.querySelector('[data-aw-toggle-menu]');
    const closeBtn = document.getElementById('mobile-menu-close-button');
    const mobileMenu = document.getElementById('mobile-menu');

    function toggleMenu() {
      if (mobileMenu) {
        mobileMenu.classList.toggle('opacity-0');
        mobileMenu.classList.toggle('invisible');
        mobileMenu.setAttribute('aria-hidden', mobileMenu.classList.contains('invisible').toString());
        document.body.classList.toggle('overflow-hidden');
      }
    }

    openBtn?.addEventListener('click', toggleMenu);
    closeBtn?.addEventListener('click', toggleMenu);

    // Close on ESC key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && mobileMenu && !mobileMenu.classList.contains('invisible')) {
        toggleMenu();
      }
    });

    // Close mobile menu when clicking on a navigation link (better UX)
    const mobileLinks = mobileMenu?.querySelectorAll('a');
    mobileLinks?.forEach(link => {
      link.addEventListener('click', () => {
        toggleMenu();
      });
    });

    // Smooth scroll for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href') || '');
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  });
</script>
